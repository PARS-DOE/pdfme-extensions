# .clinerules

## Project Overview
- This repository is a fork of the pdfme libraries, specifically extending the @pdfme/schemas package with additional schema implementations.
- Developed by a team at the US Department of Energy primarily for internal reporting needs, but published open-source for the community's benefit.
- The core features and functionality of the original pdfme libraries are maintained while adding enhanced formatting capabilities and display options.
- The extended libraries must function in both browser and Node.js environments, just like the original.
- The libraries rely on a forked version of [pdf-lib](https://pdf-lib.js.org/) (@pdfme/pdf-lib) to handle PDF rendering, including CJK font and SVG support.
- The codebase includes:
  - **packages** directory: Contains the main libraries classified as:
    1. **@pdfme/generator, @pdfme/schemas, @pdfme/ui** – Tools for generating PDFs from JSON templates and designing templates/UI.
    2. **@pdfme/manipulator, @pdfme/converter** – Utilities for PDF manipulation (merge, split, convert to images, etc.).
    3. **@pdfme/common** – Common logic and shared types.
  - **playground** directory: React SPA for e2e tests, demos, and development checks.

## Extension Focus
- The primary focus is on enhancing text schema capabilities with:
  - Conditional formatting based on field values
  - Improved numerical formatting (currency, percentages)
  - Border options for text elements
  - Dedicated readonly label schema
  - True table structures for display purposes
  - Conditional element visibility

## Development Guidelines

1. **Maintain Compatibility**
   - All extensions must maintain compatibility with the original PDFme plugin architecture.
   - Extensions should build upon existing schema patterns rather than replacing them.
   - Changes should not break backward compatibility with existing templates.

2. **Minimize Maintenance Overhead**
   - Avoid adding new dependencies unless strictly necessary. Provide a strong justification if a dependency is added.
   - Write as little code as possible. Remove or unify code that is not essential.
   - Shared functionality across packages should be relocated to **@pdfme/common**.
   - Only add tests that are truly needed for coverage. Avoid redundant or trivial tests.

3. **Functions and Interfaces**
   - Prefer pure functions without side effects for ease of unit testing.
   - Keep functions minimal, focusing on clarity and testability.
   - Document all new public functions and interface extensions.

4. **Browser and Node.js Support**
   - Ensure all libraries work seamlessly in both the browser and Node.js.

5. **Code Formatting**
   - Do not include unnecessary formatting changes in commits.
   - Use `npm run prettier` at the root level as the project's definitive formatting tool.

6. **Build and Test Requirements**
   - Pass `npm run build` and `npm run test` at the root level before merging changes.
   - Ensure no introduced changes break existing functionality in any package.

7. **Documentation Consistency**
   - Document all new schemas and extensions thoroughly.
   - Provide examples of how to use the extended schemas.

8. **Minimal Scope Changes**
   - Keep PRs and commits scoped to the smallest functional update. 
   - Refrain from adding extraneous code or merging unrelated changes.

## Security and Maintenance
- Focus on secure implementation since many users will view and utilize this code.
- Always protect sensitive files (e.g., .env, credentials).
- Follow best practices in code organization, architecture, and testing.

## Cline Memory Bank
- Use Cline Memory Bank to track project context and progress.
- Memory Bank consists of the following Markdown files:
  - **projectbrief.md**: Defines project scope and purpose
  - **productContext.md**: Problems solved, features, UX goals
  - **activeContext.md**: Current work focus, recent changes, next steps
  - **systemPatterns.md**: Architecture, technical decisions, design patterns
  - **techContext.md**: Technologies used, development setup, constraints
  - **progress.md**: Feature status, remaining work, current status

## Memory Bank Update Guidelines
- When discovering new project patterns
- After implementing significant changes
- When context clarification is needed
- When "update memory bank" command is requested (review all files)

## Project Intelligence
- Critical implementation paths: Focus on extending schemas with enhanced formatting capabilities
- User settings and workflows: Maintain intuitive APIs while adding more formatting options
- Project-specific patterns: Follow and extend existing schema patterns
- Known issues to address: Limitations with complex PDF layouts, lack of conditional formatting, and true table structures
